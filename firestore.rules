rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isSignedIn() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user is the owner
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Helper function to check if user is a provider
    function isProvider() {
      return isSignedIn() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'provider';
    }
    
    // Helper function to check if user is a customer
    function isCustomer() {
      return isSignedIn() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'customer';
    }

    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Providers collection
    match /providers/{providerId} {
      allow read: if true; // Public read for browsing providers
      allow create: if isSignedIn();
      allow update: if isAdmin() || 
                       (isSignedIn() && resource.data.ownerUid == request.auth.uid) ||
                       // Allow rating updates from review system
                       (isSignedIn() && 
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['ratingAvg', 'ratingCount', 'updatedAt']));
      allow delete: if isAdmin();
    }

    // Services collection (subcollection of providers)
    match /providers/{providerId}/services/{serviceId} {
      allow read: if true; // Public read
      allow write: if isAdmin() || 
                      (isSignedIn() && get(/databases/$(database)/documents/providers/$(providerId)).data.ownerUid == request.auth.uid);
    }

    // Bookings collection - CRITICAL FOR ATOMIC BOOKING SERVICE
    match /bookings/{bookingId} {
      // Allow read if:
      // - User is admin
      // - User is the customer who created the booking
      // - User is the provider receiving the booking
      allow read: if isAdmin() || 
                     (isSignedIn() && (
                       resource.data.customerId == request.auth.uid ||
                       resource.data.providerId == request.auth.uid
                     ));
      
      // Allow list/query if:
      // - User is admin (can see all bookings)
      // - User is authenticated (needed for atomic service to query by providerId)
      // Note: Individual document access is still restricted by read rule above
      allow list: if isSignedIn();
      
      // Allow create if:
      // - User is authenticated and is the customer creating the booking
      // - The customerId matches the authenticated user
      allow create: if isSignedIn() && 
                       request.resource.data.customerId == request.auth.uid;
      
      // Allow update if:
      // - User is admin (can override any booking)
      // - User is the customer (can cancel/update their booking)
      // - User is the provider (can accept/reject/update booking)
      allow update: if isAdmin() || 
                       (isSignedIn() && (
                         resource.data.customerId == request.auth.uid ||
                         resource.data.providerId == request.auth.uid
                       ));
      
      // Allow delete only for admins
      allow delete: if isAdmin();
    }

    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true; // Public read
      allow create: if isSignedIn() && 
                       request.resource.data.customerId == request.auth.uid;
      allow update: if isAdmin() || 
                       isOwner(resource.data.customerId);
      allow delete: if isAdmin();
    }

    // Verification queue
    match /verification_queue/{queueId} {
      allow read: if isAdmin() || 
                     (isSignedIn() && resource.data.ownerUid == request.auth.uid);
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Announcements
    match /announcements/{announcementId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Categories
    match /categories/{categoryId} {
      allow read: if true; // Public read
      allow write: if isAdmin();
    }

    // Service categories
    match /service_categories/{categoryId} {
      allow read: if true; // Public read
      allow write: if isAdmin();
    }

    // Notifications
    match /notifications/{notificationId} {
      // Allow read if user is admin or if the notification is for this user
      // Handle both regular notifications (receiverId) and admin notifications (targetUserId)
      allow read: if isAdmin() || 
                     (isSignedIn() && (
                       resource.data.receiverId == request.auth.uid ||
                       resource.data.targetUserId == request.auth.uid ||
                       (resource.data.targetRole == 'customer' && isCustomer()) ||
                       (resource.data.targetRole == 'provider' && isProvider()) ||
                       (resource.data.targetRole == 'admin' && isAdmin())
                     ));
      allow create: if isSignedIn();
      // Allow update/delete only if the notification belongs to this user
      allow update, delete: if isAdmin() || 
                               (isSignedIn() && (
                                 resource.data.receiverId == request.auth.uid ||
                                 resource.data.targetUserId == request.auth.uid
                               ));
    }

    // Admin audit logs
    match /admin_audit_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAdmin();
      allow update: if false; // Audit logs should never be updated
      allow delete: if false; // Audit logs should never be deleted
    }

    // Provider reports
    match /provider_reports/{reportId} {
      allow read: if isAdmin() || 
                     (isSignedIn() && resource.data.reportedBy == request.auth.uid);
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}