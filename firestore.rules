rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        (exists(/databases/$(database)/documents/admins/$(request.auth.uid)) ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Users can read/write their own data, admins can read all
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Only admins can access admin collection
    match /admins/{adminId} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Only super admins can manage other admins
    match /admins/{adminId} {
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isSuperAdmin == true;
    }
    
    // Admin audit logs - only admins can read
    match /adminAuditLogs/{logId} {
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Providers - admins can manage all, owners can manage their own
    match /providers/{providerId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (request.auth.uid == providerId || isAdmin());
    }
    
    // Bookings - users can read their own, admins can read all
    match /bookings/{bookingId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.customerId || 
         request.auth.uid == resource.data.providerId ||
         isAdmin());
      allow write: if request.auth != null && 
        (request.auth.uid == resource.data.customerId || 
         request.auth.uid == resource.data.providerId ||
         isAdmin());
    }
    
    // Reviews - users can read all, write their own
    match /reviews/{reviewId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (request.auth.uid == resource.data.customerId || isAdmin());
    }
    
    // Announcements - admins can manage, users can read
    match /announcements/{announcementId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Categories - everyone can read, admins can write
    match /categories/{categoryId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Verification queue - admins can read/write, providers can write their own
    match /verification_queue/{queueId} {
      allow read: if request.auth != null && isAdmin();
      allow write: if request.auth != null && 
        (request.auth.uid == request.resource.data.providerId || isAdmin());
    }
    
    // Service categories - everyone can read, admins can write
    match /serviceCategories/{categoryId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Provider reports - admins can read/write, users can write their own reports
    match /provider_reports/{reportId} {
      allow read: if request.auth != null && isAdmin();
      allow write: if request.auth != null && 
        (request.auth.uid == request.resource.data.reportedBy || isAdmin());
    }
    
    // Report logs - only admins can read
    match /report_logs/{logId} {
      allow read: if request.auth != null && isAdmin();
    }
    
    // Customer reports - admins can read/write
    match /customer_reports/{reportId} {
      allow read: if request.auth != null && isAdmin();
      allow write: if request.auth != null && isAdmin();
    }
    
    // Customer logs - only admins can read
    match /customer_logs/{logId} {
      allow read: if request.auth != null && isAdmin();
    }
  }
}