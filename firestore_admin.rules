rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isSignedIn() && 
             exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isCustomer() {
      return isSignedIn() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'customer';
    }
    
    function isProvider() {
      return isSignedIn() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'provider';
    }

    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isSignedIn(); // Anyone can create their own user doc on signup
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Providers collection
    match /providers/{providerId} {
      allow read: if true; // Public read for listings
      allow create: if isProvider() && isOwner(resource.data.ownerUid);
      allow update: if isOwner(resource.data.ownerUid) || isAdmin();
      allow delete: if isAdmin();
    }

    // Categories collection
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Bookings collection
    match /bookings/{bookingId} {
      allow create: if isCustomer() && isOwner(request.resource.data.customerId);
      allow read: if isOwner(resource.data.customerId) || 
                     isOwner(resource.data.providerId) || 
                     isAdmin();
      allow update: if (isOwner(resource.data.providerId) && 
                       request.resource.data.status in ['accepted', 'completed', 'rejected']) ||
                     (isOwner(resource.data.customerId) && 
                      request.resource.data.status == 'cancelled') ||
                     isAdmin();
      allow delete: if isAdmin();
    }

    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isCustomer() && 
                       isOwner(request.resource.data.customerId) &&
                       get(/databases/$(database)/documents/bookings/$(request.resource.data.bookingId)).data.status == 'completed';
      allow update: if isOwner(resource.data.customerId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Announcements collection
    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Admin audit logs
    match /adminAuditLogs/{logId} {
      allow read, write: if isAdmin();
    }

    // Verification queue
    match /verificationQueue/{queueId} {
      allow read: if isProvider() || isAdmin();
      allow create: if isProvider() && isOwner(request.resource.data.ownerUid);
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Admins collection - only admins can access
    match /admins/{adminId} {
      allow read, write: if isAdmin();
    }
  }
}
